AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Full Game Set

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    MemorySize: 512 
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        AWS_EMF_NAMESPACE: !Sub "${EMFNamespace}"
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

    
Parameters:
  IoTEndpoint:
    Type: String
    Description: IoTEndpoin for WS over MQTT
  LogRetentionDays:
    Type: Number
    Description: Days to retain CloudWatch Logs for the Lambda Functions
    Default: 30
  ResourceGroupPrefix:
    Type: String
    Description: Name of the Resource Group prefix
    Default: 'GameService'
  EMFNamespace:
    Type: String
    Description: Name of the EMF Namespace
    Default: 'STS'
  S3BufferInterval:
    Description: Number of seconds to buffer data before delivering to S3 (60 to 900).
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
  S3BufferSize:
    Description: Number of MB of data to buffer before delivering to S3 (1 to 128).
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 128
  SourceStreamSize:
    Description: Kinesis Stream Size
    Type: String
    AllowedPattern: '[0-9]*'
    Default: '1'
    
Resources:
  ResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: !Join ["-", [!Sub "${ResourceGroupPrefix}", "Main"]]

  DT:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./dynamodbtemplate.yaml
      Parameters:
        ResourceGroupName: !Join ["-", [!Sub "${ResourceGroupPrefix}", "DynamoDB"]] 

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.0.82/28
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ1)

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Routes (AZ2)

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB
      
  WS:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./websocketstemplate.yaml
      Parameters:
        GamePlayersTable: !GetAtt DT.Outputs.GamePlayersTable
        PlayerInventoryTable: !GetAtt DT.Outputs.PlayerInventoryTable
        PlayerWalletTable: !GetAtt DT.Outputs.PlayerWalletTable
        HighScoreTable: !GetAtt DT.Outputs.HighScoreTable
        GamesDetailTable: !GetAtt DT.Outputs.GamesDetailTable
        PlayerProgressTopicName: !GetAtt PlayerProgressTopic.TopicName
        PlayerProgressTopicArn: !Ref PlayerProgressTopic
        UserPoolID: !Ref UserPool
        LogRetentionDays: !Sub "${LogRetentionDays}"
        ResourceGroupName: !Join ["-", [!Sub "${ResourceGroupPrefix}", "WebSockets"]]
        EMFNamespace: !Sub "${EMFNamespace}"
        QuizSourceStreamName: !GetAtt Analytics.Outputs.QuizSourceStreamName
        ChatTopicName: !GetAtt SendChatTopic.TopicName
        ChatTopicArn: !Ref SendChatTopic
        EventBusName: !Ref STSEventBus

  HTTP:
    Type: AWS::Serverless::Application
    DependsOn: VPC
    Properties:
      Location: ./httptemplate.yaml
      Parameters:
        PlayerInventoryTable: !GetAtt DT.Outputs.PlayerInventoryTable
        PlayerWalletTable: !GetAtt DT.Outputs.PlayerWalletTable
        HighScoreTable: !GetAtt DT.Outputs.HighScoreTable
        GamesDetailTable: !GetAtt DT.Outputs.GamesDetailTable
        MarketplaceTable: !GetAtt DT.Outputs.MarketplaceTable
        PlayerTable: !GetAtt DT.Outputs.PlayerTable
        PlayerProgressTable: !GetAtt DT.Outputs.PlayerProgressTable
        SubscriptionTable: !GetAtt DT.Outputs.SubscriptionTable
        PlayerProgressTopicName: !GetAtt PlayerProgressTopic.TopicName
        PlayerProgressTopicArn: !Ref PlayerProgressTopic
        PlayerAvatarBucket: !Ref PlayerAvatarBucket
        PlayerWalletTopicName: !GetAtt PlayerWalletTopic.TopicName
        PlayerWalletTopicArn: !Ref PlayerWalletTopic
        UserPoolID: !Ref UserPool
        AppClientID: !Ref UserPoolClient
        LeaderboardTopicName: !GetAtt LeaderboardTopic.TopicName
        LeaderboardTopicArn: !Ref LeaderboardTopic
        LogRetentionDays: !Sub "${LogRetentionDays}"
        ResourceGroupName: !Join ["-", [!Sub "${ResourceGroupPrefix}", "HTTP"]]
        EMFNamespace: !Sub "${EMFNamespace}"
        PurchaseSourceStreamName: !GetAtt Analytics.Outputs.PurchaseSourceStreamName
        QuizSourceStreamName: !GetAtt Analytics.Outputs.QuizSourceStreamName
        VpcId: !Ref VPC
        PrivateSubnetA: !Ref PrivateSubnetA
        PrivateSubnetB: !Ref PrivateSubnetB
        EventBusName: !Ref STSEventBus
        CloudFrontDomain: !GetAtt PlayerAvatarDistribution.DomainName

  IOT:
    Type: AWS::Serverless::Application
    DependsOn: VPC    
    Properties:
      Location: ./iot.yaml
      Parameters:
        PlayerInventoryTable: !GetAtt DT.Outputs.PlayerInventoryTable
        GamesDetailTable: !GetAtt DT.Outputs.GamesDetailTable
        HighScoreTable: !GetAtt DT.Outputs.HighScoreTable
        PlayerProgressTopicName: !GetAtt PlayerProgressTopic.TopicName
        PlayerProgressTopicArn: !Ref PlayerProgressTopic
        EMFNamespace: !Sub "${EMFNamespace}"
        LogRetentionDays: !Sub "${LogRetentionDays}"
        QuizSourceStreamName: !GetAtt Analytics.Outputs.QuizSourceStreamName
        IoTEndpoint: !Sub "${IoTEndpoint}"
        ChatTopicName: !GetAtt SendChatTopic.TopicName
        ChatTopicArn: !Ref SendChatTopic
        PrivateSubnetA: !Ref PrivateSubnetA
        PrivateSubnetB: !Ref PrivateSubnetB
        VpcId: !Ref VPC
        EventBusName: !Ref STSEventBus
        
  Analytics:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./analytics.yaml
      Parameters:
        ResourceGroupName: !Join ["-", [!Sub "${ResourceGroupPrefix}", "Analytics"]]
        ServicePrefix: !Sub "${AWS::StackName}"
        S3BufferInterval: !Ref S3BufferInterval
        S3BufferSize: !Ref S3BufferSize
        SourceStreamSize: !Ref SourceStreamSize

  PlayerProgressPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/playerprogression_put/
      MemorySize: 1024
      Environment:
        Variables:
          PLAYER_PROGRESS_TABLE_NAME: !GetAtt DT.Outputs.PlayerProgressTable
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !GetAtt DT.Outputs.PlayerProgressTable
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        SNSSendMessageEvent:
          Type: SNS
          Properties:
            Topic: !Ref PlayerProgressTopic
      Tags:
        Dashboard: GeneralOps

  PlayerProgressPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerProgressPutFunction]]

  ScorePutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      MemorySize: 1536
      CodeUri: Functions/Main/score_put/
      Environment:
        Variables:
          SCORES_TABLE_NAME: !GetAtt DT.Outputs.HighScoreTable
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !GetAtt DT.Outputs.HighScoreTable
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        SNSSendMessageEvent:
          Type: SNS
          Properties:
            Topic: !Ref LeaderboardTopic
      Tags:
        Dashboard: GeneralOps

  ScorePutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ScorePutFunction]]

  MoneyAdjustFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/money_adjust/
      MemorySize: 2048
      Environment:
        Variables:
          PLAYER_WALLET_TABLE_NAME: !GetAtt DT.Outputs.PlayerWalletTable
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !GetAtt DT.Outputs.PlayerWalletTable
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        SNSSendMessageEvent:
          Type: SNS
          Properties:
            Topic: !Ref PlayerWalletTopic
      Tags:
        Dashboard: GeneralOps

  MoneyAdjustFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref MoneyAdjustFunction]]

  SendChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/chat_send/
      MemorySize: 2048
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref SendChatPolicy
      Events:
        SNSSendChatEvent:
          Type: SNS
          Properties:
            Topic: !Ref SendChatTopic
      Tags:
        Dashboard: GeneralOps

  SendChatFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref SendChatFunction]]

  SendChatPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTSendChatPolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/chat/*"]]

  # Web Push Notification
  SSMCreateAndDeleteVapidParametersPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-SSMCreateAndDeleteParametersPolicy" ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter*
              - ssm:DeleteParameters
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'

  WebpushVapidGenerateFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/webpush_vapid_generate/
      MemorySize: 512
      Environment:
        Variables:
          REGION: !Sub "${AWS::Region}"
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref SSMCreateAndDeleteVapidParametersPolicy
  WebpushVapidGenerateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref WebpushVapidGenerateFunction]]

  WebpushVapidKeys:
    Type: Custom::WebpushVapidKeys
    Properties:
      ServiceToken: !GetAtt WebpushVapidGenerateFunction.Arn
      Region: !Ref "AWS::Region"
      StackName: !Sub ${AWS::StackName}

  SSMGetVapidParametersPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-SSMGetVapidParametersPolicy" ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter*
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WebpushVapidKeys.PublicKeyPath}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WebpushVapidKeys.PrivateKeyPath}'
      Roles:
        - !Ref WebpushNotificationFunctionRole

  WebpushNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/webpush_notification_send/
      MemorySize: 512
      Environment:
        Variables:
          ENDPOINTS_TABLE_NAME: !GetAtt DT.Outputs.SubscriptionTable
          REGION: !Sub "${AWS::Region}"
          DOMAIN: !GetAtt HTTP.Outputs.HTTPApiGWURI
          VAPID_PUBLIC_KEY_PATH: !GetAtt WebpushVapidKeys.PublicKeyPath
          VAPID_PRIVATE_KEY_PATH: !GetAtt WebpushVapidKeys.PrivateKeyPath
      Policies:
        - DynamoDBReadPolicy:
            TableName: !GetAtt DT.Outputs.SubscriptionTable
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        AvatarWorkflowCompleted:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref STSEventBus
            Pattern:
              source:
                - sts.avatar
              detail-type:
                - "Avatar Processing Completed"
                - "Avatar Processing Failed"
      Tags:
        Dashboard: GeneralOps

  WebpushNotificationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref WebpushNotificationFunction]]

  PlayerAvatarThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/Main/playeravatar_thumbnail/
      MemorySize: 1024
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PlayerAvatarBucket
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Tags:
        Dashboard: GeneralOps

  PlayerAvatarThumbnailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerAvatarThumbnailFunction]]
            
  PlayerAvatarCloudfrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: !Sub 'Origin Access Identity ${AWS::StackName} for player avatars'
  PlayerAvatarDistribution:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
        Origins: 
          - DomainName: !Join [ "", [ !Ref PlayerAvatarBucket, ".s3.", !Ref "AWS::Region", ".amazonaws.com"]]
            Id: 'S3PlayerAvatarOrigin'
            S3OriginConfig:
              OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref PlayerAvatarCloudfrontOAI]]
            ConnectionAttempts: 3
            ConnectionTimeout: 10
        Comment: 'SimpletriviaService: CloudFront Distribution for player avatars'
        DefaultCacheBehavior: 
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad'
          TargetOriginId: 'S3PlayerAvatarOrigin'
          ViewerProtocolPolicy: https-only
        Enabled: true
        IPV6Enabled: true
        ViewerCertificate: 
          CloudFrontDefaultCertificate: true

  PlayerAvatarBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"
  
  PlayerAvatarBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref PlayerAvatarBucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Principal:
              CanonicalUser: !GetAtt PlayerAvatarCloudfrontOAI.S3CanonicalUserId
            Resource: !Join ["", ["arn:aws:s3:::", !Ref PlayerAvatarBucket, "/*"]]


  PlayerAvatarLoggingBucket: 
    Type: AWS::S3::Bucket

  PlayerAvatarLoggingBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: PlayerAvatarLoggingBucket
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${PlayerAvatarLoggingBucket}
          - 
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${PlayerAvatarLoggingBucket}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"

  PlayerAvatarTrail: 
    Type: AWS::CloudTrail::Trail
    DependsOn: 
      - PlayerAvatarBucketPolicy
    Properties: 
      TrailName:
        !Sub |-
            ${PlayerAvatarBucket}-Trail
      S3BucketName: 
        Ref: PlayerAvatarLoggingBucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - IncludeManagementEvents: false
          DataResources:
          - Type: AWS::S3::Object
            Values:
              - !Sub |-
                arn:aws:s3:::${PlayerAvatarBucket}/
      IncludeGlobalServiceEvents: false

  STSEventBus:
      Type: AWS::Events::EventBus
      Properties: 
        Name: !Sub ${AWS::StackName}

  CognitoUpdateUserAttributesPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Join [ "", [!Ref "AWS::StackName", "-CognitoUpdateUserAttributesPolicy" ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource: !GetAtt UserPool.Arn
      Roles:
        - !Ref PlayerAvatarStateMachineRole
  
  PlayerAvatarStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: player_avatar_statemachine/player_avatar.asl.json
      DefinitionSubstitutions:
        ThumbnailFunction: !Ref PlayerAvatarThumbnailFunction
        DistributionUrl: !GetAtt PlayerAvatarDistribution.DomainName
        PlayerTable: !GetAtt DT.Outputs.PlayerTable
        CognitoUserPoolId: !Ref UserPool
        EventBusName: !Ref STSEventBus
        EventSource: sts.avatar
      Type: EXPRESS
      Tracing:
        Enabled: True
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt PlayerAvatarLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref PlayerAvatarThumbnailFunction
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref STSEventBus
        - DynamoDBWritePolicy:
            TableName: !GetAtt DT.Outputs.PlayerTable
        - S3CrudPolicy:
            BucketName: !Ref PlayerAvatarBucket
        - RekognitionLabelsPolicy: {}
        - CloudWatchLogsFullAccess
        
      Events:
        AvatarUploadedEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - 'AWS API Call via CloudTrail'
              detail:
                userIdentity:
                  arn:
                    - !Sub arn:aws:sts::${AWS::AccountId}:assumed-role/${HTTP.Outputs.PlayerPutFunctionRole}/${HTTP.Outputs.PlayerPutFunction}
                eventSource:
                  - s3.amazonaws.com
                eventName:
                  - PostObject
                  - PutObject
                requestParameters:
                  bucketName:
                    - !Ref PlayerAvatarBucket
            InputPath: '$.detail.requestParameters'

  PlayerAvatarLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Sub "/sts/statemachines/playeravatar-${AWS::StackName}"
  
  PlayerProgressTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PlayerProgressTopic

  LeaderboardTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: LeaderboardTopic
      
  SendChatTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SendChatTopic

  PlayerWalletTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: WalletTopic

  PreSignUpTrigger:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      Timeout: 5
      CodeUri: Functions/Main/cognito_presignup/

  UserPoolLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref PreSignUpTrigger
      SourceArn: !GetAtt UserPool.Arn
      
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpTrigger.Arn
  
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
        - !Ref CognitoUserPolicy
        
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
        - !Ref CognitoUserPolicy

  CognitoUserPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-CognitoUserPolicy"] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
              - "cognito-sync:*"
            Resource: !Join [ "", [ "arn:aws:cognito-sync:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":identitypool/", !Ref IdentityPool] ]

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
        
Outputs:
  httpapi:
    Description: "ID of the HTTP API for STS"
    Value: !GetAtt HTTP.Outputs.HTTPApiGWURI

  wsapi:
    Description: "ID of the WebSocket API for STS"
    Value: !GetAtt WS.Outputs.WebSocketURI

  identitypoolid:
    Description: "ID of the Identity Pool for STS"
    Value: !Ref IdentityPool
    
  userpoolid:
    Description: "ID of the UserPool for STS"
    Value: !Ref UserPool
  
  appclientid:
    Description: "ID of the AppClient for STS"
    Value: !Ref UserPoolClient

  webpushvapidpublickey:
    Description: "Public Key fo the web push service"
    Value: !GetAtt WebpushVapidKeys.PublicKey
