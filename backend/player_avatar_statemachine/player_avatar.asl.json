{
  "Comment": "Player avatar processing Step Function",
  "StartAt": "Parallel",
  "States": {
    "Parallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Moderate",
          "States": {
            "Moderate": {
              "Type": "Task",
              "Parameters": {
                "Image": {
                  "S3Object": {
                    "Bucket.$": "$.bucketName",
                    "Name.$": "$.key"
                  }
                },
                "MinConfidence": 75
              },
              "Resource": "arn:aws:states:::aws-sdk:rekognition:detectModerationLabels",
              "ResultPath": "$.moderation",
              "ResultSelector": {
                "labels.$": "$.ModerationLabels"
              },
              "Next": "Label Detected?"
            },
            "Label Detected?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.moderation.labels[0]",
                  "IsPresent": true,
                  "Next": "DeleteObject"
                }
              ],
              "Default": "CreateThumbnail"
            },
            "CreateThumbnail": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ThumbnailFunction}",
                "Payload": {
                  "bucketName.$": "$.bucketName",
                  "key.$": "$.key",
                  "contentType.$": "$.Content-Type",
                  "playerId.$": "$.x-amz-meta-playerid"
                },
                "Qualifier": "Live"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.profile",
              "ResultSelector": {
                "avatar.$": "States.Format('https://${DistributionUrl}/{}', $$.Execution.Input.key)",
                "thumbnail.$": "States.Format('https://${DistributionUrl}/{}', $.Payload.key)"
              },
              "Next": "ProfileUpdate"
            },
            "ProfileUpdate": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "DynamoDBUpdate",
                  "States": {
                    "DynamoDBUpdate": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:updateItem",
                      "Parameters": {
                        "TableName": "${PlayerTable}",
                        "Key": {
                          "playerName": {
                            "S.$": "$$.Execution.Input.x-amz-meta-playerid"
                          }
                        },
                        "UpdateExpression": "SET avatar = :avatar, thumbnail = :thumbnail",
                        "ExpressionAttributeValues": {
                          ":avatar": {
                            "S.$": "$.profile.avatar"
                          },
                          ":thumbnail": {
                            "S.$": "$.profile.thumbnail"
                          }
                        },
                        "ReturnValues": "UPDATED_NEW"
                      },
                      "End": true,
                      "ResultPath": "$.dynamoUpdateResult"
                    }
                  }
                },
                {
                  "StartAt": "CognitoUpdate",
                  "States": {
                    "CognitoUpdate": {
                      "Type": "Task",
                      "End": true,
                      "Parameters": {
                        "UserAttributes": [
                          {
                            "Name": "picture",
                            "Value.$": "$.profile.thumbnail"
                          }
                        ],
                        "UserPoolId": "${CognitoUserPoolId}",
                        "Username.$": "$$.Execution.Input.x-amz-meta-playerid"
                      },
                      "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminUpdateUserAttributes",
                      "ResultPath": "$.cognitoUpdateResult"
                    }
                  }
                }
              ],
              "Next": "Publish Accepted"
            },
            "Publish Accepted": {
              "Type": "Task",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "playerName.$": "$$.Execution.Input.x-amz-meta-playerid",
                      "result": "success",
                      "message": "Avatar accepted",
                      "data.$": "States.JsonToString($[0].profile)",
                      "topic": "avatar"
                    },
                    "DetailType": "Avatar Processing Completed",
                    "EventBusName": "${EventBusName}",
                    "Source": "${EventSource}"
                  }
                ]
              },
              "Resource": "arn:aws:states:::aws-sdk:eventbridge:putEvents",
              "End": true
            },
            "DeleteObject": {
              "Type": "Task",
              "Parameters": {
                "Bucket.$": "$.bucketName",
                "Key.$": "$.key"
              },
              "Resource": "arn:aws:states:::aws-sdk:s3:deleteObject",
              "ResultPath": "$.s3DeleteResult",
              "Next": "Publish Rejected"
            },
            "Publish Rejected": {
              "Type": "Task",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "playerName.$": "$$.Execution.Input.x-amz-meta-playerid",
                      "result": "error",
                      "message": "Avatar rejected",
                      "data.$": "States.JsonToString($.moderation)",
                      "topic": "avatar"
                    },
                    "DetailType": "Avatar Processing Completed",
                    "EventBusName": "${EventBusName}",
                    "Source": "${EventSource}"
                  }
                ]
              },
              "Resource": "arn:aws:states:::aws-sdk:eventbridge:putEvents",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "PublishError"
        }
      ],
      "End": true
    },
    "PublishError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "playerName.$": "$$.Execution.Input.x-amz-meta-playerid",
              "result": "error",
              "message": "Avatar Workflow Exception",
              "data": "{\"reason\":\"An unexpected error occured while processing the avatar.\"}",
              "topic": "avatar"
            },
            "DetailType": "Avatar Processing Failed",
            "EventBusName": "${EventBusName}",
            "Source": "${EventSource}"
          }
        ]
      },
      "End": true
    }
  }
}