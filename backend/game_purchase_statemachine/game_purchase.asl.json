{
  "Comment": "In-game purchase StepFunction",
  "StartAt": "CheckBuyerSeller",
  "States": {
    "CheckBuyerSeller": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.sellerPlayerId",
              "IsPresent": false
            },
            {
              "Variable": "$.playerId",
              "IsPresent": false
            },
            {
              "Variable": "$.gameId",
              "IsPresent": false
            }
          ],
          "Next": "MissingInput"
        },
        {
          "Variable": "$.sellerPlayerId",
          "StringEqualsPath": "$.playerId",
          "Next": "CantBuyOwnGame"
        },
        {
          "Not": {
            "Variable": "$.sellerPlayerId",
            "StringEqualsPath": "$.playerId"
          },
          "Next": "GetPlayerFunds"
        }
      ]
    },
    "GetPlayerFunds": {
      "Comment": "Get player wallet",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${PlayerWalletTable}",
        "Key": {
          "playerName": {
            "S.$": "$.playerId"
          }
        }
      },
      "ResultPath": "$.Wallet",
      "ResultSelector": {
        "amount.$": "$.Item.amount.N"
      },
      "Next": "GetGameData"
    },
    "GetGameData": {
      "Comment": "Get Game Information",
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${MarketplaceTable}",
        "Key": {
          "gameId": {
            "S.$": "$.gameId"
          },
          "playerName": {
            "S.$": "$.sellerPlayerId"
          }
        }
      },
      "ResultPath": "$.GameInfo",
      "ResultSelector": {
        "quizName.$": "$.Item.quizName.S",
        "quizDescription.$": "$.Item.quizDescription.S",
        "quizMode.$": "$.Item.quizMode.S",
        "questionType.$": "$.Item.questionType.S",
        "amount.$": "$.Item.amount.N",
        "usage": 1
      },
      "Next": "TransformData"
    },
    "TransformData" : {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters":{  
        "FunctionName":"${TransformFunction}",
        "Payload":{  
           "playerWallet.$":"$.Wallet.amount",
           "gameAmount.$":"$.GameInfo.amount"
        },
        "Qualifier":"Live"
      },
      "ResultPath":"$.transform",
      "ResultSelector":{
        "gameAmount.$":"$.Payload.gameNumeric",
        "walletAmount.$":"$.Payload.walletNumeric"
      },
      "Next":"CheckData"
    },
    "CheckData": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.transform.walletAmount",
          "IsPresent": false,
          "Next": "NotEnoughFunds"
        },
        {
          "Variable": "$.transform.walletAmount",
          "NumericLessThanEquals": 0,
          "Next": "NotEnoughFunds"
        },
        {
          "Variable": "$.transform.gameAmount",
          "IsPresent": false,
          "Next": "GameSold"
        },
        {
          "Variable": "$.transform.gameAmount",
          "NumericLessThanEqualsPath": "$.transform.walletAmount",
          "Next": "RemoveGameFromMarketplace"
        },
        {
          "Variable": "$.transform.gameAmount",
          "NumericGreaterThanPath": "$.transform.walletAmount",
          "Next": "NotEnoughFunds"
        }
      ]
    },
    "CantBuyOwnGame": {
      "Type": "Pass",
      "End": true,
      "Result": {
        "statusCode": 200,
        "Access-Control-Allow-Origin": '*',
        "body": {
          "message": "Cannot purchase your own items"
        }
      }
    },
    "RemoveGameFromMarketplace": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:deleteItem",
      "Parameters": {
        "TableName": "${MarketplaceTable}",
        "Key": {
          "gameId": {
            "S.$": "$.gameId"
          },
          "playerName": {
            "S.$": "$.sellerPlayerId"
          }
        }
      },
      "ResultPath": "$.RecordDeleted",
      "Next": "TransferFundsAndGoods"
    },
    "TransferFundsAndGoods": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "RemoveFundsFromAccount",
          "States": {
            "RemoveFundsFromAccount": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${PlayerWalletTopicArn}",
                "Message": "Remove funds",
                "MessageAttributes": {
                  "playerId": {
                    "DataType": "String",
                    "StringValue.$": "$.playerId"
                  },
                  "amount": {
                    "DataType": "Number",
                    "StringValue.$": "$.GameInfo.amount"
                  },
                  "action": {
                    "DataType": "String",
                    "StringValue": "subtract"
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "AddGameToInventory",
          "States": {
            "AddGameToInventory": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${PlayerInventoryTable}",
                "Item": {
                  "pk": {
                    "S.$": "$.playerId"
                  },
                  "sk": {
                    "S.$": "$.gameId"
                  },
                  "playerName": {
                    "S.$": "$.playerId"
                  },
                  "gameId": {
                    "S.$": "$.gameId"
                  },
                  "questionType": {
                    "S.$": "$.GameInfo.questionType"
                  },
                  "quizMode": {
                    "S.$": "$.GameInfo.quizMode"
                  },
                  "quizName": {
                    "S.$": "$.GameInfo.quizName"
                  },
                  "quizDescription": {
                    "S.$": "$.GameInfo.quizDescription"
                  },
                  "usage": {
                    "N": "1"
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "AddFundsToSeller",
          "States": {
            "AddFundsToSeller": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${PlayerWalletTopicArn}",
                "Message": "Add funds",
                "MessageAttributes": {
                  "playerId": {
                    "DataType": "String",
                    "StringValue.$": "$.sellerPlayerId"
                  },
                  "amount": {
                    "DataType": "Number",
                    "StringValue.$": "$.GameInfo.amount"
                  },
                  "action": {
                    "DataType": "String",
                    "StringValue": "add"
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.Parallel",
      "Next": "WritePurchasedToKinesis"
    },
    "NotEnoughFunds": {
      "Type": "Pass",
      "Result": {
        "statusCode": 200,
        "Access-Control-Allow-Origin": '*',
        "body": {
          "message": "Not enough funds in wallet"
        }
      },
      "End": true
    },
    "GameSold": {
      "Type": "Pass",
      "Result": {
        "statusCode": 200,
        "Access-Control-Allow-Origin": '*',
        "body": {
          "message": "Game sold on marketplace already"
        }
      },
      "End": true
    },
    "MissingInput": {
      "Type": "Pass",
      "Result": {
        "statusCode": 200,
        "Access-Control-Allow-Origin": '*',
        "body": {
          "message": "Missing input from API"
        }
      },
      "End": true
    },
    "WritePurchasedToKinesis" : {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters":{  
        "FunctionName":"${WritePurchasedToKinesisFunction}",
        "Payload":{  
           "playerId.$":"$.playerId",
           "gameAmount.$":"$.GameInfo.amount"
        },
        "Qualifier":"Live"
      },
      "Next":"ReturnPurchased"
    },
    "ReturnPurchased": {
      "Type": "Pass",
      "Result": {
        "statusCode": 200,
        "Access-Control-Allow-Origin": '*',
        "body": {
          "message": "Game successfully purchased"
        }
      },
      "End": true
    }
  }
}