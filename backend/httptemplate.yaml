AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Backend using HTTP (including functions)

Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    MemorySize: 512 
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        AWS_EMF_NAMESPACE: !Sub "${EMFNamespace}"
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

Parameters:
  PlayerInventoryTable:
    Type: String
    Description: Player inventory table
  PlayerWalletTable:
    Type: String
    Description: Player wallet table
  HighScoreTable:
    Type: String
    Description: Table for game high scores
  GamesDetailTable:
    Type: String
    Description: Table for Game Questions
  PlayerTable:
    Type: String
    Description: Table for Player Profiles
  PlayerProgressTable:
    Type: String
    Description: Table for Player Progress
  SubscriptionTable:
    Type: String
    Description: Table for Endpoints for Web Push Notifications
  MarketplaceTable:
    Type: String
    Description: Table for Marketplace
  PlayerProgressTopicName:
    Type: String
    Description: Topic Name for sending player progress
  PlayerProgressTopicArn:
    Type: String
    Description: Topic Arn for sending player progress
  PlayerAvatarBucket:
    Type: String
    Description: S3 Bucket containing player avatars
  LeaderboardTopicName:
    Type: String
    Description: Topic Name for sending leaderboard entries
  LeaderboardTopicArn:
    Type: String
    Description: Topic Arn for sending leaderboard data
  PlayerWalletTopicName:
    Type: String
    Description: Topic Name for sending playerwallet entries
  PlayerWalletTopicArn:
    Type: String
    Description: Topic Arn for sending playerwallet data
  UserPoolID:
    Type: String
    Description: Cognito User Pool ID for users
  AppClientID:
    Type: String
    Description: Cognito App Client ID
  LogRetentionDays:
    Type: Number
    Description: Number of days to retain CloudWatch Logs for
  ResourceGroupName:
    Type: String
    Description: Name of the ResourceGroup for resources in this template
  EMFNamespace:
    Type: String
    Description: Name of the EMF Namespace  
  PurchaseSourceStreamName:
    Type: String
    Description: Stream for purchases
  QuizSourceStreamName:
    Type: String
    Description: Stream for results
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId for the game
  PrivateSubnetA:
    Type: String
    Description: Private Subnet A
  PrivateSubnetB:
    Type: String
    Description: Private Subnet B
  EventBusName:
    Type: String
    Description: Name of the EventBus
  CloudFrontDomain:
    Type: String
    Description: Domain for avatar retrieval

Resources:
  ResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: !Sub "${ResourceGroupName}"

#Moved to HTTP Template due to SAM 1.21.1 tightening of rules for deploying nested applications with layers
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub 'utilslayer--${AWS::StackName}'
      Description: Utils layer to be used by different lambda functions
      ContentUri: dependencies/utilslayer/nodejs/utilslayer.zip
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  MyGamesListFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/mygames_list/
      MemorySize: 512
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE: !Sub "${PlayerInventoryTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth: 
              Authorizer: HTTPAuthorizer
            Method: GET
            Path: /players/{playerId}/games
      Tags:
        Dashboard: HTTPHost

  MyGamesListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref MyGamesListFunction]]

  PlayerGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/player_get/
      MemorySize: 1024
      Environment:
        Variables:
          PLAYER_TABLE_NAME: !Sub "${PlayerTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth: 
              Authorizer: HTTPAuthorizer
            Method: GET
            Path: /players/{playerId}
      Tags:
        Dashboard: HTTPPlayer

  PlayerGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerGetFunction]]

  PlayerPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/player_put/
      MemorySize: 1024
      Environment:
        Variables:
          PLAYER_TABLE_NAME: !Sub "${PlayerTable}"
          PLAYER_AVATAR_BUCKET: !Ref PlayerAvatarBucket
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "${PlayerTable}"
        - S3CrudPolicy:
            BucketName: !Ref PlayerAvatarBucket
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth: 
              Authorizer: HTTPAuthorizer
            Method: PUT
            Path: /players/{playerId}
      Tags:
        Dashboard: HTTPPlayer

  PlayerPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerPutFunction]]

  WebpushSubscriptionPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/webpush_subscription_put/
      MemorySize: 512
      Environment:
        Variables:
          ENDPOINTS_TABLE_NAME: !Sub "${SubscriptionTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "${SubscriptionTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth: 
              Authorizer: HTTPAuthorizer
            Method: POST
            Path: /players/{playerId}/subscriptions
      Tags:
        Dashboard: HTTPPlayer

  WebpushSubscriptionPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref WebpushSubscriptionPutFunction]]

  PlayerProgressGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/playerprogression_get/
      MemorySize: 1024
      Environment:
        Variables:
          PLAYER_PROGRESS_TABLE_NAME: !Sub "${PlayerProgressTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerProgressTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth: 
              Authorizer: HTTPAuthorizer
            Method: GET
            Path: /players/{playerId}/progress
      Tags:
        Dashboard: HTTPPlayer

  PlayerProgressGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerProgressGetFunction]]

  GameGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/game_get/
      MemorySize: 1024
      Environment:
        Variables:
          GAMES_DETAIL_TABLE_NAME: !Sub "${GamesDetailTable}"
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: HTTPAuthorizer
            Method: GET
            Path: /players/{playerId}/games/{gameId}
      Tags:
        Dashboard: HTTP

  GameGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameGetFunction]]

  LeaderboardGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/leaderboard_get/
      MemorySize: 1536
      Environment:
        Variables:
          SCOREBOARD_TABLE_NAME: !Sub "${HighScoreTable}"
          CLOUDFRONT_DOMAIN: !Sub "${CloudFrontDomain}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${HighScoreTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /games/{gameId}/scoreboard
            Auth: 
              Authorizer: HTTPAuthorizer
        HttpApiEventwPlayer:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /games/{gameId}/scoreboard/{playerId}
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP

  LeaderboardGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref LeaderboardGetFunction]]

  QuestionPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/question_put/
      MemorySize: 1536
      Environment:
        Variables:
          QUESTIONS_TABLE_NAME: !Sub "${GamesDetailTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /games/{gameId}/questions/{questionNumber}
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTPAdmin

  QuestionPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref QuestionPutFunction]]

  GameHeaderPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/gameheader_put/
      MemorySize: 1536
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE: !Sub "${PlayerInventoryTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /games
            Auth:
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTPAdmin

  GameHeaderPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameHeaderPutFunction]]

  GamePlayFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/game_play/
      MemorySize: 1536
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          QUESTIONS_TABLE_NAME: !Sub "${GamesDetailTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /games/{gameId}/{playerId}
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP

  GamePlayFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GamePlayFunction]]

  ActiveGameSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties:
      Description: Subnet group for DAX
      SubnetGroupName: ActiveGamesGroup
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  HTTPLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP Lambda Security Group
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  DAXRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - dax.amazonaws.com
              - lambda.amazonaws.com              
        Version: '2012-10-17'
      ManagedPolicyArns:
         - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
         - !Ref DAXManagedPolicy

  DAXManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-DAXManagedRole" ] ]      
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Resource: '*'
          Action:
          - 'dax:PutItem'
          - 'dax:GetItem'
          - 'dax:Query'
          - 'dax:DeleteItem'
          - 'dax:UpdateItem'
          - 'dynamodb:DescribeTable'
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:UpdateItem'
          - 'dynamodb:Query'
          - 'dynamodb:DeleteItem'

  DAXSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for DAX
      GroupName: DAXActiveGames
      VpcId: !Ref VpcId

  DAXSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DAXSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 8111
      ToPort: 8111
      SourceSecurityGroupId: !GetAtt HTTPLambdaSecurityGroup.GroupId

  DAXCluster:
    Type: AWS::DAX::Cluster
    Properties:
      ClusterName: simpleTriviaService
      Description: Cluster for simpleTriviaService
      IAMRoleARN: !GetAtt DAXRole.Arn
      NodeType: dax.r5.large
      ReplicationFactor: 2
      SecurityGroupIds:
        - !GetAtt DAXSecurityGroup.GroupId
      SubnetGroupName: !Ref ActiveGameSubnetGroup
      ParameterGroupName: !Ref DAXParams
      
  DAXParams:
    Type: AWS::DAX::ParameterGroup
    Properties:
      Description: Params for Simple Trivia Service
      ParameterNameValues:
         "query-ttl-millis" : "5000"
         "record-ttl-millis" : "10000"      
  ActiveGamesListFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/activegames_list/
      MemorySize: 1536
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          DAX_ENDPOINT: !GetAtt DAXCluster.ClusterDiscoveryEndpoint
          REGION: !Sub "${AWS::Region}"
      Role: !GetAtt DAXRole.Arn
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /activegames
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt HTTPLambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

  ActiveGamesListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ActiveGamesListFunction]]

  ActiveGamesDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/activegames_delete/
      MemorySize: 1536
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          DAX_ENDPOINT: !GetAtt DAXCluster.ClusterDiscoveryEndpoint
          REGION: !Sub "${AWS::Region}"
      Role: !GetAtt DAXRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        DeleteGameEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - "Websockets.game_end"
                - "IoT.game_end"
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 60
            EventBusName: !Sub "${EventBusName}"
      Tags:
        Dashboard: HTTP
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt HTTPLambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

  ActiveGamesDeleteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ActiveGamesDeleteFunction]]

  GameHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/game_host/
      MemorySize: 1536
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          DAX_ENDPOINT: !GetAtt DAXCluster.ClusterDiscoveryEndpoint
          REGION: !Sub "${AWS::Region}"
      Role: !GetAtt DAXRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        DeleteGameEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - "Websockets.game_host"
                - "IoT.game_host"
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 60
            EventBusName: !Sub "${EventBusName}"
      Tags:
        Dashboard: HTTP
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt HTTPLambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

  GameHostFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameHostFunction]]

  GameAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      Timeout: 15
      MemorySize: 1024
      CodeUri: Functions/HTTP/game_answer/
      Environment:
        Variables:
          QUESTIONS_TABLE_NAME: !Sub "${GamesDetailTable}"
          PLAYER_PROGRESS_TOPIC: !Sub "${PlayerProgressTopicArn}" 
          LEADERBOARD_TOPIC: !Sub "${LeaderboardTopicArn}"
          RESPONSE_STREAM: !Sub "${QuizSourceStreamName}"
          REGION: !Sub ${AWS::Region}
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${PlayerProgressTopicName}"
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${LeaderboardTopicName}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - KinesisCrudPolicy:
            StreamName: !Sub "${QuizSourceStreamName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /games/{gameId}/answer
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP

  GameAnswerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameAnswerFunction]]

  GameActivateFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/game_activate/
      MemorySize: 1024
      Environment:
        Variables:
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /activegames/{gameId}
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP

  GameActivateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameActivateFunction]]

  PlayerWalletAddFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/playerwallet_add/
      MemorySize: 1536
      Environment:
        Variables:
          PLAYER_WALLET_TOPIC: !Sub "${PlayerWalletTopicArn}"
          REGION: !Sub ${AWS::Region}
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${PlayerWalletTopicName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /players/{playerId}/wallet
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTPPlayer

  PlayerWalletAddFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerWalletAddFunction]]

  PlayerWalletGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/playerwallet_get/
      MemorySize: 1536
      Environment:
        Variables:
          PLAYER_WALLET_TABLE_NAME: !Sub "${PlayerWalletTable}"
          REGION: !Sub ${AWS::Region}
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerWalletTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /players/{playerId}/wallet
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTPPlayer

  PlayerWalletGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref PlayerWalletGetFunction]]

  GameListOnMarketPlaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/game_listonmarketplace/
      MemorySize: 1024
      Environment:
        Variables:
          MARKETPLACE_TABLE_NAME: !Sub "${MarketplaceTable}"
          PLAYER_INVENTORY_TABLE_NAME: !Sub "${PlayerInventoryTable}"
          REGION: !Sub ${AWS::Region}
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Sub "${MarketplaceTable}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: PUT
            Path: /players/{playerId}/games/{gameId}
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: Marketplace

  GameListOnMarketPlaceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GameListOnMarketPlaceFunction]]
      
  MarketplaceGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: HTTPLive
      CodeUri: Functions/HTTP/marketplace_get/
      MemorySize: 2048
      Layers:
        - !Ref UtilsLayer
      Environment:
        Variables:
          MARKETPLACE_TABLE_NAME: !Sub "${MarketplaceTable}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${MarketplaceTable}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        HttpApiEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /marketplace
            Auth: 
              Authorizer: HTTPAuthorizer
      Tags:
        Dashboard: Marketplace

  MarketplaceGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref MarketplaceGetFunction]]

  WritePurchasedToKinesisFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/purchasedgame_putkinesis/
      MemorySize: 2560
      Environment:
        Variables:
          REGION: !Sub "${AWS::Region}"
          PURCHASE_STREAM: !Sub "${PurchaseSourceStreamName}"
      Policies:
        - KinesisCrudPolicy:
            StreamName: !Sub "${PurchaseSourceStreamName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Tags:
        Dashboard: Marketplace

  WritePurchasedToKinesisFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref WritePurchasedToKinesisFunction]]

  PurchaseGameStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: game_purchase_statemachine/game_purchase.asl.json
      DefinitionSubstitutions:
        PlayerWalletTable: !Sub "${PlayerWalletTable}"
        PlayerInventoryTable: !Sub "${PlayerInventoryTable}"
        MarketplaceTable: !Sub "${MarketplaceTable}"
        PlayerWalletTopicArn: !Sub "${PlayerWalletTopicArn}"
        WritePurchasedToKinesisFunction: !Ref WritePurchasedToKinesisFunction
        TransformFunction: !Ref GamePurchaseTransformFunction
      Type: EXPRESS
      Tracing:
        Enabled: True
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt MarketplacePurchaseLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerWalletTable}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${MarketplaceTable}"
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${PlayerWalletTopicName}"
        - LambdaInvokePolicy:
            FunctionName: !Ref GamePurchaseTransformFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref WritePurchasedToKinesisFunction
        - CloudWatchLogsFullAccess

  MarketplacePurchaseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Sub "/sts/statemachines/purchasegame-${AWS::StackName}"

  GamePurchaseTransformFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: Live
      CodeUri: Functions/HTTP/game_purchase_transform/
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Tags:
        Dashboard: Marketplace

  GamePurchaseTransformLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref GamePurchaseTransformFunction]]

  PurchaseGameStateMachineIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationSubtype: StepFunctions-StartSyncExecution
      PayloadFormatVersion: 1.0
      CredentialsArn: !GetAtt HttpApiRole.Arn
      RequestParameters:
        Input: "$request.body"
        StateMachineArn: !Ref PurchaseGameStateMachine
  
  PurchaseGameStateMachineRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - PurchaseGameStateMachineIntegration
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /marketplace"
      AuthorizationType: JWT
      AuthorizerId: !Ref HTTPAuthorizerSM
      Target: !Join
        - /
        - - integrations
          - !Ref PurchaseGameStateMachineIntegration
        
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
          AllowCredentials: Boolean
          AllowHeaders:
            - "*"
          AllowMethods:
            - "*"
          AllowOrigins: 
            - "http://*"
            - "https://*"
          MaxAge: 600
      Auth: 
        Authorizers:
          HTTPAuthorizer:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolID}"
              audience:
                - !Sub "${AppClientID}"
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: HTTPAuthorizer
      Tags:
        Dashboard: HTTP

  HTTPAuthorizerSM:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      ApiId: !Ref HttpApi
      AuthorizerResultTtlInSeconds: 0
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration: 
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolID}"
        Audience:
          - !Sub "${AppClientID}"
      Name: HTTPAuthorizerSM

  HttpApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref HTTPManagedPolicy
        
  HTTPManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-HTTPManagedPolicyforStepFunctions" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "states:StartSyncExecution"
            Resource: !GetAtt PurchaseGameStateMachine.Arn

  AvatarBucket:
    Type: AWS::S3::Bucket

#Included here due to limitation of SAM requiring functions to be in the same template
  AttachPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/HTTP/permissions_add/
      Environment:
        Variables:
          ATTACH_POLICY: !Ref IoTFullPolicy
          REGION: !Sub "${AWS::Region}"
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref IoTAttachPoliciesPolicy
      Events:
        HttpApiEvent: 
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /playerpermission
            Auth: 
              Authorizer: HTTPAuthorizer

  IoTAttachPoliciesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["", [!Ref "AWS::StackName", "-IoTAttachPoliciesPolicy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AddPermissionsPolicy
            Effect: Allow
            Action:
            - iot:AttachPrincipalPolicy
            - iot:DetachPrincipalPolicy
            Resource: "*"
      
  AttachPolicyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref AttachPolicyFunction]]
  
  IoTFullPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "iot:Connect"
            Resource: '*'
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/*"]]
          - Effect: "Allow"
            Action: "iot:Subscribe"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topicfilter/*"]]
          - Effect: "Allow"
            Action: "iot:Receive"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/*"]]

Outputs:

  PlayerPutFunction:
    Description: "PlayerPut Function"
    Value: !Ref PlayerPutFunction
    Export:
      Name: !Sub "${AWS::StackName}-PlayerPutFunction"

  PlayerPutFunctionRole:
    Description: "PlayerPut Function Role"
    Value: !Ref PlayerPutFunctionRole
    Export:
      Name: !Sub "${AWS::StackName}-PlayerPutFunctionRole"

  HTTPAPIGWId:
    Description: "ID of the HTTP API"
    Value: !Ref HttpApi
    Export:
      Name: !Sub "${AWS::StackName}-HTTPAPIGWID"

  HTTPApiGWURI:
    Description: "URI for the HTTP API"
    Value: !GetAtt HttpApi.ApiEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-HTTPApiGWURI"
