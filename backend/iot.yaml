AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Live Scoreboard using IoT

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  PlayerInventoryTable:
    Type: String
  GamesDetailTable:
    Type: String
  HighScoreTable:
    Type: String
  PlayerProgressTopicName:
    Type: String
    Description: Topic Name for sending player progress
  PlayerProgressTopicArn:
    Type: String
    Description: Topic Arn for sending player progress
  EMFNamespace:
    Type: String
  LogRetentionDays:
    Type: Number
    Description: Number of days to retain CloudWatch Logs for
  IoTEndpoint:
    Type: String
    Description: The IoT endpoint for data
  QuizSourceStreamName:
    Type: String
    Description: Stream for results
  ChatTopicName:
    Type: String
    Description: Name for the SNS Chat Topic
  ChatTopicArn:
    Type: String
    Description: Arn for the SNS Chat Topic
  PrivateSubnetA:
    Type: String
    Description: Private Subnet A
  PrivateSubnetB:
    Type: String
    Description: Private Subnet B
  VpcId:
    Type: AWS::EC2::VPC::Id
  EventBusName:
    Type: String
    Description: Name of the EventBus
  
Globals:
  Function:
    Runtime: nodejs12.x
    Handler: app.handler
    MemorySize: 256 
    Timeout: 10
    Tracing: Active
    Environment:
      Variables:
        AWS_EMF_NAMESPACE: !Sub "${EMFNamespace}"
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"

Resources:

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.r6g.4xlarge
      CacheSubnetGroupName: !Ref RedisClusterSubnetGroup
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt RedisClusterSecurityGroup.GroupId


  RedisClusterSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnets for Redis
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Lambda Security Group

  RedisClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lock down Redis to VPC
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

      
  SendQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/question_send/
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - DynamoDBReadPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - !Ref SendQuestionPolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/nextquestion'
      Tags:
        Dashboard: IoT

  SendQuestionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref SendQuestionFunction]]

  SendQuestionPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTSendQuestionPolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: "Allow"
              Action: "iot:Publish"
              Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/question"]]

  CacheGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_cache/
      MemorySize: 1536
      Environment:
        Variables:
          GAMES_DETAIL_TABLE_NAME: !Sub "${GamesDetailTable}"
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          EVENT_BUS_NAME: !Sub "${EventBusName}"          
          CHAT_TOPIC_ARN: !Sub "${ChatTopicArn}"
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - DynamoDBReadPolicy:
            TableName: !Sub "${GamesDetailTable}"
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${ChatTopicName}"
        - EventBridgePutEventsPolicy:
            EventBusName: !Sub "${EventBusName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref CacheGamePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'hostgame'
      Tags:
        Dashboard: IoT

  CacheGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref CacheGameFunction]]
  
  CacheGamePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTCacheGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/questionlist"]]

  JoinGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_join/
      MemorySize: 1024
      Environment:
        Variables:
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref JoinGamePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/join/+'
      Tags:
        Dashboard: IoT

  JoinGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref JoinGameFunction]]

  JoinGamePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTJoinGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/joined/*"]]

  ReceiveAnswerFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/answer_receive/
      MemorySize: 512
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          RESPONSE_STREAM: !Sub "${QuizSourceStreamName}"
          REGION: !Sub "${AWS::Region}"
      Policies:
        - KinesisCrudPolicy:
            StreamName: !Sub "${QuizSourceStreamName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref ReceiveAnswerIoTPolicy
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/answers/+'
      Tags:
        Dashboard: IoT

  ReceiveAnswerIoTPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTReceiveAnswerPolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/scoreboard"]]
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/playercorrect"]]
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/results/*"]]

  ReceiveAnswerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref ReceiveAnswerFunction]]

  StartGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_start/
      MemorySize: 512
      Environment:
        Variables:
          IOT_ENDPOINT: !Sub "${IoTEndpoint}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          REGION: !Sub "${AWS::Region}"
      Policies:
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - !Ref StartGameIoTPolicy
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/startgame'
      Tags:
        Dashboard: IoT

  StartGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref StartGameFunction]]

  StartGameIoTPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Join [ "", [!Ref "AWS::StackName", "-IoTStartGamePolicy" ] ]      
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action: "iot:Publish"
            Resource: !Join ["", ["arn:aws:iot:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":topic/games/*/scoreboard"]]

  EndGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: MMLive
      CodeUri: Functions/IoT/game_end/
      MemorySize: 1536
      Timeout: 20
      Environment:
        Variables:
          LEADER_BOARD_TABLE_NAME: !Sub "${HighScoreTable}"
          PLAYER_PROGRESS_TOPIC: !Sub "${PlayerProgressTopicArn}"
          REDIS_ENDPOINT: !GetAtt RedisCluster.RedisEndpoint.Address
          REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
          EVENT_BUS_NAME: !Sub "${EventBusName}"          
          REGION: !Sub "${AWS::Region}"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${PlayerInventoryTable}"
        - DynamoDBCrudPolicy:
            TableName: !Sub "${HighScoreTable}"
        - SNSPublishMessagePolicy:
            TopicName: !Sub "${PlayerProgressTopicName}" 
        - EventBridgePutEventsPolicy:
            EventBusName: !Sub "${EventBusName}"
        - CloudWatchLambdaInsightsExecutionRolePolicy
      Events:
        IoTRule:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM 'games/+/endthegame'
      Tags:
        Dashboard: IoT

  EndGameLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: !Sub "${LogRetentionDays}"
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref EndGameFunction]]